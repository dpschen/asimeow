name: CI - Test and publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: asimeow

jobs:
  test:
    name: Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  build-macos:
    name: Build macOS Binaries
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} release/${{ env.BINARY_NAME }}-${{ matrix.target }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: release/${{ env.BINARY_NAME }}-${{ matrix.target }}
          if-no-files-found: error

#  publish-create:
#    name: Publish to crates.io
#    needs: test
#    if: startsWith(github.ref, 'refs/tags/v')
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#
#      - name: Publish to crates.io
#        uses: actions-rs/cargo@v1
#        with:
#          command: publish
#          args: --token ${{ secrets.CRATES_IO_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Prepare release assets
        run: |
          cd release
          # Create zip files for each binary
          for dir in */; do
            dir=${dir%/}
            chmod +x "$dir/$dir"
            zip -j "$dir.zip" "$dir/$dir"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            release/*.zip
          body: |
            ## Asimeow v${{ steps.get_version.outputs.VERSION }}

            ### Installation

            #### Homebrew
            
            ```bash
            brew tap mdnmdn/asimeow
            brew install asimeow
            ```

            #### Manual Installation
            Download the appropriate binary for your system:
            - Intel Mac: asimeow-x86_64-apple-darwin.zip
            - Apple Silicon Mac: asimeow-aarch64-apple-darwin.zip

            Extract and place the binary in your PATH.

            #### Cargo
            ```
            cargo install asimeow
            ```

            See [CHANGELOG.md](https://github.com/mdnmdn/asimeow/blob/main/CHANGELOG.md) for details on changes in this release.

  update-homebrew:
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using manually provided version: ${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "Using version from tag: $VERSION"
          fi

      - name: Check if assets exist
        id: check_assets
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://github.com/${{ github.repository }}/releases/download/v$VERSION/asimeow-x86_64-apple-darwin.zip)
          
          if [ "$HTTP_CODE" == "200" ] ||  [ "$HTTP_CODE" == "302" ] ||  [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "ASSETS_EXIST=true" >> $GITHUB_OUTPUT
            echo "Assets exist or force update enabled, proceeding with formula update"
          else
            echo "ASSETS_EXIST=false" >> $GITHUB_OUTPUT
            echo "Assets don't exist for version v$VERSION, aborting"
            exit 1
          fi

      - name: Download release assets and compute SHA256
        id: sha256
        if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Download each asset and compute SHA256
          mkdir -p tmp
          
          # macOS ARM64
          curl -L -o tmp/macos-arm64.zip https://github.com/${{ github.repository }}/releases/download/v$VERSION/asimeow-aarch64-apple-darwin.zip
          MACOS_ARM64_SHA256=$(sha256sum tmp/macos-arm64.zip | cut -d ' ' -f 1)
          
          # macOS x86_64
          curl -L -o tmp/macos-x86.zip https://github.com/${{ github.repository }}/releases/download/v$VERSION/asimeow-x86_64-apple-darwin.zip
          MACOS_X86_SHA256=$(sha256sum tmp/macos-x86.zip | cut -d ' ' -f 1)
          
          # Export SHA256 values
          echo "MACOS_ARM64_SHA256=$MACOS_ARM64_SHA256" >> $GITHUB_OUTPUT
          echo "MACOS_X86_SHA256=$MACOS_X86_SHA256" >> $GITHUB_OUTPUT

      - name: Checkout homebrew tap
        if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
        uses: actions/checkout@v3
        with:
          repository: mdnmdn/homebrew-asimeow
          token: ${{ secrets.TAP_REPO_TOKEN }}
          path: homebrew-asimeow

      - name: Update formula
        if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          MACOS_ARM64_SHA256=${{ steps.sha256.outputs.MACOS_ARM64_SHA256 }}
          MACOS_X86_SHA256=${{ steps.sha256.outputs.MACOS_X86_SHA256 }}
          
          cd homebrew-asimeow
          
          mkdir -p Formula
          
          # Create or update formula file
          cat > Formula/asimeow.rb << EOF
          class Asimeow < Formula
            desc "A tool for managing macOS Time Machine exclusions for developer projects"
            homepage "https://github.com/${{ github.repository }}"
            version "$VERSION"
            license "MIT"  # Replace with your actual license
          
            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/asimeow-aarch64-apple-darwin.zip"
                sha256 "$MACOS_ARM64_SHA256"
              else
                url "https://github.com/${{ github.repository }}/releases/download/v$VERSION/asimeow-x86_64-apple-darwin.zip"
                sha256 "$MACOS_X86_SHA256"
              end
            end
          
            def install
              bin.install "asimeow"
              # Add any other files you want to install
            end
          
            test do
              system "#{bin}/asimeow", "--help"
            end
          end
          EOF

      - name: Commit and push changes
        if: steps.check_assets.outputs.ASSETS_EXIST == 'true'
        run: |
          cd homebrew-asimeow
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add Formula/asimeow.rb
          git commit -m "Update formula to v${{ steps.version.outputs.VERSION }}"
          git push

      - name: Set output status
        if: always()
        run: |
          if [ "${{ steps.check_assets.outputs.ASSETS_EXIST }}" == "true" ]; then
            echo "✅ Formula updated successfully to version ${{ steps.version.outputs.VERSION }}"
          else
            echo "❌ Failed to update formula. Assets don't exist for version ${{ steps.version.outputs.VERSION }}"
          fi